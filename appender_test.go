package logf

import (
	"encoding/base64"
	"errors"
	"os"
	"syscall"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestDiscardAppender(t *testing.T) {
	a := NewDiscardAppender()

	assert.NoError(t, a.Append(Entry{}))
	assert.NoError(t, a.Flush())
	assert.NoError(t, a.Sync())
}

type testWriterNoSync struct {
	writeData []byte
}

func (w *testWriterNoSync) Write(p []byte) (n int, err error) {
	if len(p) == 0 {
		panic("TestBuffer.Writer buffer can't be empty!")
	}
	w.writeData = p

	return 0, nil
}

type testWriter struct {
	writeData   []byte
	syncCounter int

	e error
}

func (w *testWriter) Write(p []byte) (n int, err error) {
	if len(p) == 0 {
		panic("TestBuffer.Writer buffer can't be empty!")
	}
	w.writeData = p

	return 0, nil
}

func (w *testWriter) Sync() error {
	w.syncCounter++

	return w.e
}

func checkWriterData(t *testing.T, w *testWriter, writeData string, syncCounter int) {
	assert.Equal(t, writeData, string(w.writeData))
	assert.Equal(t, syncCounter, w.syncCounter)

	w.syncCounter = 0
	w.writeData = nil
}

type failingEncoder struct {
	e error
}

func (e *failingEncoder) Encode(*Buffer, Entry) error {
	return e.e
}

type failingWriter struct {
	e error
}

func (w *failingWriter) Write(p []byte) (n int, err error) {
	return 0, w.e
}

func (w *failingWriter) Sync() error {
	return w.e
}

func TestWriteAppenderErrors(t *testing.T) {
	goldenErr := errors.New("test error")

	w := testWriter{}
	a := NewWriteAppender(&w, &failingEncoder{goldenErr})
	// Sync should be called once in constructor to check sync possibility.
	checkWriterData(t, &w, "", 1)

	assert.EqualError(t, a.Append(Entry{}), goldenErr.Error())
	checkWriterData(t, &w, "", 0)

	a = NewWriteAppender(&failingWriter{goldenErr}, NewJSONEncoder.Default())
	assert.NoError(t, a.Append(Entry{}))
	assert.EqualError(t, a.Flush(), goldenErr.Error())
	assert.EqualError(t, a.Sync(), goldenErr.Error())
}

func TestWriteAppenderNoSync(t *testing.T) {
	w := testWriterNoSync{}

	a := NewWriteAppender(&w, NewJSONEncoder.Default())
	assert.NoError(t, a.Sync())
}

func TestWriteAppenderInvalidSync(t *testing.T) {
	// Check for EINVAL - a known error if Writer is bound to a
	// special File (e.g., a pipe or socket) which does not support
	// synchronization.

	w := testWriter{e: &os.PathError{Err: syscall.EINVAL}}

	a := NewWriteAppender(&w, NewJSONEncoder.Default())
	// Sync should be called once in constructor to check sync possibility.
	checkWriterData(t, &w, "", 1)

	assert.NoError(t, a.Sync())
	// Sync is ignoring now.
	checkWriterData(t, &w, "", 0)
}

func TestWriteAppender(t *testing.T) {
	w := testWriter{}

	a := NewWriteAppender(&w, NewJSONEncoder.Default())
	// Sync should be called once in constructor to check sync possibility.
	checkWriterData(t, &w, "", 1)

	assert.NoError(t, a.Sync())
	// Expected no buffer because of no data and one sync call.
	checkWriterData(t, &w, "", 1)

	// Test Append auto flush.

	bigEntry := Entry{
		Text: base64.StdEncoding.EncodeToString(make([]byte, PageSize)),
	}

	assert.NoError(t, a.Append(bigEntry))
	// Passed entry is enough to force Appender to call Flush automatically.
	// Expected specified buffer and no sync calls.
	checkWriterData(t, &w, `{"level":"error","ts":"0001-01-01T00:00:00Z","msg}`+"\n", 0)

	// Test Flush.

	assert.NoError(t, a.Append(Entry{}))
	// Passed entry size less than Appender buffer size. So no buffer is
	// expected and no sync calls.
	checkWriterData(t, &w, "", 0)

	assert.NoError(t, a.Flush())
	// Flush forced Appender to commit it's buffer. Expected specified
	// buffer and no sync calls.
	checkWriterData(t, &w, `{"level":"error","ts":"0001-01-01T00:00:00Z","msg":""}`+"\n", 0)

	assert.NoError(t, a.Flush())
	// Second flush should do nothing.
	checkWriterData(t, &w, "", 0)

	// Test Sync.

	assert.NoError(t, a.Append(Entry{}))
	// Passed entry size less than Appender buffer size. So no buffer is
	// expected and no sync calls.
	checkWriterData(t, &w, "", 0)

	assert.NoError(t, a.Flush())
	assert.NoError(t, a.Sync())
	// Sync forced Appender to commit it's buffer. Expected specified
	// buffer and one sync call.
	checkWriterData(t, &w, `{"level":"error","ts":"0001-01-01T00:00:00Z","msg":""}`+"\n", 1)
}

func TestCompositeAppender(t *testing.T) {
	w := testWriter{}

	wa := NewWriteAppender(&w, NewJSONEncoder.Default())
	da := NewDiscardAppender()
	a := NewCompositeAppender(wa, da)

	// Sync should be called once in constructor to check sync possibility.
	checkWriterData(t, &w, "", 1)

	assert.NoError(t, a.Sync())
	// Expected no buffer because of no data and one sync call.
	checkWriterData(t, &w, "", 1)

	// Test Append auto flush.

	bigEntry := Entry{
		Text: base64.StdEncoding.EncodeToString(make([]byte, PageSize)),
	}

	assert.NoError(t, a.Append(bigEntry))
	// Passed entry is enough to force Appender to call Flush automatically.
	// Expected specified buffer and no sync calls.
	checkWriterData(t, &w, `{"level":"error","ts":"0001-01-01T00:00:00Z","msg}`+"\n", 0)

	// Test Flush.

	assert.NoError(t, a.Append(Entry{}))
	// Passed entry size less than Appender buffer size. So no buffer is
	// expected and no sync calls.
	checkWriterData(t, &w, "", 0)

	assert.NoError(t, a.Flush())
	// Flush forced Appender to commit it's buffer. Expected specified
	// buffer and no sync calls.
	checkWriterData(t, &w, `{"level":"error","ts":"0001-01-01T00:00:00Z","msg":""}`+"\n", 0)

	assert.NoError(t, a.Flush())
	// Second flush should do nothing.
	checkWriterData(t, &w, "", 0)

	// Test Sync.

	assert.NoError(t, a.Append(Entry{}))
	// Passed entry size less than Appender buffer size. So no buffer is
	// expected and no sync calls.
	checkWriterData(t, &w, "", 0)

	assert.NoError(t, a.Flush())
	assert.NoError(t, a.Sync())
	// Sync forced Appender to commit it's buffer. Expected specified
	// buffer and one sync call.
	checkWriterData(t, &w, `{"level":"error","ts":"0001-01-01T00:00:00Z","msg":""}`+"\n", 1)
}
